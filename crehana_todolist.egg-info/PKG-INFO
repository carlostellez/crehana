Metadata-Version: 2.4
Name: crehana-todolist
Version: 1.0.0
Summary: A comprehensive TodoList API with REST and GraphQL endpoints
Author-email: Crehana <dev@crehana.com>
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Framework :: FastAPI
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# Crehana TodoList API

A simple TodoList REST API built with FastAPI following the technical assessment requirements.

## 🚀 Features

- **Complete REST API** with all CRUD operations for tasks
- **FastAPI** framework for high performance
- **Clean Architecture** with separated layers (Models, Services, API)
- **Comprehensive Testing** with pytest (unit and integration tests)
- **Code Quality Tools** (flake8, black, isort)
- **Docker & Docker Compose** for containerization
- **In-memory data storage** for rapid prototyping
- **Automatic API documentation** with FastAPI
- **Health checks** and monitoring endpoints
- **CORS** support for frontend integration

## 🛠️ Tech Stack

- **Backend**: FastAPI
- **Architecture**: Clean Architecture (Models → Services → API)
- **Data Storage**: In-memory (for development/prototyping)
- **Testing**: pytest + httpx + pytest-cov
- **Code Quality**: flake8 + black + isort + mypy
- **Containerization**: Docker & Docker Compose
- **Documentation**: English docstrings and comprehensive README

## 📋 Prerequisites

- Docker and Docker Compose installed
- Python 3.8+ (for local development)
- Git

## 🚀 Quick Start

### 1. Clone the repository
```bash
git clone <repository-url>
cd crehana
```

### 2. Build and run with Docker Compose
```bash
# Build and start the service
docker-compose up --build

# Run in background
docker-compose up -d --build
```

### 3. Access the API
- **REST API Documentation**: http://localhost:8000/docs
- **ReDoc Documentation**: http://localhost:8000/redoc
- **Health Check**: http://localhost:8000/health

## 📁 Project Structure

```
crehana/
├── app/
│   ├── __init__.py
│   ├── main.py                 # FastAPI application with REST endpoints
│   ├── models/                 # Data models and Pydantic schemas
│   │   ├── __init__.py
│   │   └── task.py            # Task models and schemas
│   └── services/              # Business logic layer
│       ├── __init__.py
│       └── task_service.py    # Task business logic
├── tests/                      # Test suite
│   ├── __init__.py
│   ├── test_routes.py         # Integration tests for REST API
│   └── test_services.py       # Unit tests for services
├── docker-compose.yml          # Docker services configuration
├── Dockerfile                  # Application container
├── requirements.txt            # Python dependencies
├── pytest.ini                 # Pytest configuration
├── .flake8                    # Flake8 linting configuration
├── pyproject.toml             # Black and other tool configurations
├── Makefile                   # Development commands
└── README.md                  # Project documentation
```

## 🏗️ Architecture Layers

### 1. **Models Layer** (`app/models/`)
- **Purpose**: Data models and validation schemas
- **Components**: Pydantic models for Task
- **Features**: Input validation, serialization, type safety

### 2. **Services Layer** (`app/services/`)
- **Purpose**: Business logic and data operations
- **Components**: TaskService
- **Features**: CRUD operations, business rules, data validation

### 3. **API Layer** (`app/main.py`)
- **Purpose**: REST API endpoints and HTTP handling
- **Components**: FastAPI routes with dependency injection
- **Features**: Request/response handling, error management, documentation

## 📊 REST API Endpoints

The API provides the following endpoints as required by the assessment:

### Core Task Endpoints
- `GET /tasks/` - Get all tasks
- `POST /tasks/` - Create a new task
- `GET /tasks/{id}/` - Get a task by ID
- `PUT /tasks/{id}/` - Update a task by ID
- `DELETE /tasks/{id}/` - Delete a task by ID

### Additional Endpoints
- `GET /health` - Health check endpoint

### Task Data Format
Each task has the following structure:
```json
{
  "id": 1,
  "title": "Sample Task",
  "description": "This is a sample task",
  "completed": false
}
```

## 🔧 Local Development Setup

### 1. Create virtual environment
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

### 2. Install dependencies
```bash
pip install -r requirements.txt
# or
make install
```

### 3. Run the application
```bash
uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
# or
make dev
```

## 🧪 Testing

### Run Tests
```bash
# Run all tests
pytest
# or
make test

# Run tests with coverage
pytest --cov=app --cov-report=html --cov-report=term
# or
make test-cov

# Run specific test file
pytest tests/test_routes.py
pytest tests/test_services.py

# Run tests in Docker
docker-compose exec web pytest
# or
make docker-test
```

### Test Coverage
The test suite includes:
- **Unit tests** for TaskService class (`tests/test_services.py`)
- **Integration tests** for all REST API endpoints (`tests/test_routes.py`)
- **Error handling tests** for 404 and validation errors
- **CRUD operation tests** for all endpoints

### Test Configuration
- Configuration in `pytest.ini`
- Test markers for unit/integration/slow tests
- Coverage reporting with HTML output

## 🔍 Code Quality

### Linting with flake8
```bash
# Run linting
flake8 app tests
# or
make lint
```

### Code Formatting with black
```bash
# Format code
black app tests
# or
make format

# Check formatting
black --check app tests
# or
make format-check
```

### Import Sorting with isort
```bash
# Sort imports
isort app tests

# Check import sorting
isort --check-only app tests
```

### All Quality Checks
```bash
# Run all quality checks
make check
```

### Configuration Files
- `.flake8` - Flake8 configuration with project-specific rules
- `pyproject.toml` - Black, isort, and other tool configurations
- Line length: 88 characters (black standard)
- Import order: Google style

## 🐳 Docker

### Build and Run
```bash
# Build the application
docker-compose build
# or
make docker-build

# Start services
docker-compose up
# or
make docker-up

# Stop services
docker-compose down
# or
make docker-down
```

### Docker Services
- **web**: FastAPI application

### Docker Commands
```bash
# View logs
docker-compose logs -f web

# Execute commands in container
docker-compose exec web bash

# Run tests in container
docker-compose exec web pytest
```

## 📈 API Examples

### Create a Task
```bash
curl -X POST "http://localhost:8000/tasks/" \
     -H "Content-Type: application/json" \
     -d '{
       "title": "Complete project documentation",
       "description": "Write comprehensive documentation",
       "completed": false
     }'
```

### Get All Tasks
```bash
curl -X GET "http://localhost:8000/tasks/"
```

### Get Task by ID
```bash
curl -X GET "http://localhost:8000/tasks/1/"
```

### Update Task
```bash
curl -X PUT "http://localhost:8000/tasks/1/" \
     -H "Content-Type: application/json" \
     -d '{
       "title": "Updated task title",
       "completed": true
     }'
```

### Delete Task
```bash
curl -X DELETE "http://localhost:8000/tasks/1/"
```

## 📈 Monitoring

- **Health Check**: `GET /health`
- **Metrics**: Available through FastAPI metrics
- **Logs**: Structured logging with Docker

## 🎯 Development Commands

Use the Makefile for common development tasks:

```bash
make help          # Show available commands
make install       # Install dependencies
make test          # Run tests
make test-cov      # Run tests with coverage
make lint          # Run linting
make format        # Format code
make format-check  # Check code formatting
make clean         # Clean cache files
make docker-build  # Build Docker image
make docker-up     # Start Docker services
make docker-down   # Stop Docker services
make docker-test   # Run tests in Docker
make dev           # Start development server
make check         # Run all quality checks
```

## 🔄 Data Persistence

Currently, the API uses in-memory data storage for rapid prototyping. Data will be reset when the application restarts. To add persistent storage:

1. Add a database service to `docker-compose.yml`
2. Update `requirements.txt` with database dependencies
3. Create database models with SQLAlchemy
4. Update services to use database operations
5. Add database migrations with Alembic

## 🎯 Assessment Requirements Compliance

This project meets all the technical assessment requirements:

### ✅ Core Requirements
- [x] **RESTful API with FastAPI** - Complete REST API with all CRUD endpoints
- [x] **CRUD Operations** - GET, POST, PUT, DELETE for tasks
- [x] **Good Programming Practices** - Clean architecture, error handling, type hints
- [x] **Unit and Integration Testing** - Comprehensive pytest test suite
- [x] **Linting and Formatting** - flake8, black, isort configuration
- [x] **Docker Configuration** - Dockerfile and docker-compose.yml
- [x] **README Documentation** - Complete setup and usage instructions

### 📊 Task Format Compliance
The API uses the exact task format specified in the assessment:
- ✅ `id` - Unique task identifier
- ✅ `title` - Task title
- ✅ `description` - Task description
- ✅ `completed` - Boolean completion status

### 🔧 Error Handling
- ✅ 404 errors for non-existent tasks
- ✅ 422 errors for validation failures
- ✅ Proper HTTP status codes
- ✅ Detailed error messages

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Run quality checks: `make check`
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License.

## 🆘 Support

For support and questions, please open an issue in the repository.
